#+TITLE: Little Projector Computer

Let's attach a little computer to each projector.

* Hardware

** Requirements

Here are some requirements:

- small and low powered enough to go above ceiling tiles or cabled tied to projector mount
- wired Ethernet and 802.11n wireless  connectivity
- HDMI 1920x1080p @ 60 Hz
- 4GB local storage

Here are some preferred options

- 8GB local storage
- eMMC storage
- available USB for keyboard+mouse during evaluation and setup
- on-board mic
- on-board IR remote control receiver

Here are some uncertainties

- Provide power via projector USB or dedicated wall-wart.  Projector kills power to USB when it turns off.  Want always-on, but not sure if outlet is available for a wall-wart, not sure if power-strip is "legal".

** Survey

Based on what single-board computers are currently available these models are considered, in alphabetical order:

- Banana Pro (BPro)
- BeagleBone Black (BBB)
- Odroid C1 (OC1)
- Orange Pi Plus (OPP)
- Raspberry Pi 2 (RPi2)

The survey captures relevant specifications and bare price and outfitted prices assuming the use of SD card and eMMC for OS and storage.  Commonalities:

- RAM :: All have 1GB except BBB with 512 MB, they differ in DDR2 vs. DDR3
- CPU :: All are ARMv7 compatible (can use standard Debian, etc)
- USB :: All have USB 2.0, at least one USB Type A host, some have OTG and some use uUSB for power
- Storage :: All have SD slots, some eMMC on-board, optional snap-on modules or not at all, some have SATA(!)
- Network :: All have at least 100Mbps, some have on-board WiFi
- Video :: All have HDMI (or uHDMI) at Full HD except for BBB which has 720p.

*** Banana Pro (BPro)

- CPU :: 2x1GHz
- GPU :: ?xMali 400mp2
- Storage :: uSD slot, SATA connector
- USB :: 2 host, 1 OTG
- Power :: uUSB
- Network :: Ethernet: 10/100/1000, WiFi: b/g/n
- Video :: HDMI

Links:

- [[http://www.lemaker.org/][Lemaker]] the maker :)
- [[http://ameridroid.com/products/banana-pro][Ameridroid page]]

*** BeagleBone Black (BBB)

- CPU :: 1x1GHz
- GPU :: ???
- Storage :: 4GB on-board, uSD slot
- USB :: 1 host
- Power :: jack, miniUSB
- Network :: Ethernet: 10/100
- Video :: uHDMI, 720p max

Links:

- [[http://beagleboard.org/black][Beagle Board]]
- [[http://elinux.org/Beagleboard:BeagleBoneBlack][Wiki]]
- [[http://www.adafruit.com/products/1996][BBB at Adafruit]]

*** Odroid C1 (OC1)

- CPU :: 4x1.5GHz
- GPU :: Mali-450mp2
- Storage :: eMMC slot, uSD slot
- USB :: 4 host, 1 otg (uUSB)
- Power :: jack
- Network :: Ethernet: 10/100/1000
- Video :: uHDMI
- extras :: IR receiver

Links:

- [[http://www.hardkernel.com/main/products/prdt_info.php][Hardkernel]] (maker)
- [[http://ameridroid.com/products/odroid-c1][Ameridroid]] (seller)

*** Orange Pi Plus (OPP)

- CPU :: 4x1.6GHz
- GPU :: Mali-400mp2
- Storage :: 8GB eMMC on-board, SD slot, SATA connector
- USB :: 4 host, 1 otg
- Power :: jack
- Network :: Ethernet: 10/100/1000, WiFi: b/g/n (Realtek RTL8189ETV)
- Video :: HDMI
- extras :: IR receiver

Links:

- [[http://www.orangepi.org/][Home page]]
- [[http://www.aliexpress.com/store/product/NEW-orange-pi-plus-Allwinner-A31s-Dual-Core-1GB-RAM-Open-source-development-board/1553371_32248189300.html][Aliexpress]]

*** Raspberry Pi 2 (RPi2)

- CPU :: 4x900MHz 
- GPU :: 2x VideoCore IV
- Storage :: uSD
- USB :: 4 host, power on uUSB
- Power :: uUSB 
- Network :: 100Mbps, Ethernet+USB shared
- Video :: HDMI

Links:

- [[http://www.adafruit.com/pdfs/raspberrypi2modelb.pdf][Data sheet from Adafruit]]


** Prices

The price estimates assume Ethernet and WiFi connectivity (WiFi needs
USB adapter in some cases).  Two options of 8GB SD or eMMC based
storage are given.  If eMMC is on-board SD option is not considered
and for BBB we just take its on-board 4GB eMMC.  Shipping is not
considered.  A few bucks for 

| model | 8GB SD | 8GB eMMC | Source     |
|-------+--------+----------+------------|
| BPro  |     64 |          | Ameridroid |
| BBB   |     87 |          | Adafruit   |
| OC1   |     67 |       82 | Ameridroid |
| OPP   |        |       56 | Aliexpress |
| RPi2  |     72 |          | Adafruit   |

** Conclusions

- BPro :: saves having a USB WiFi but this can be an added risk if on-board is problematic.  It's price competitive if no eMMC is desired.  Marginal features and long lead ordering at an unexceptional price knocks it out of the running.

- BBB :: has become ridiculously far down on the bang-for-buck measure and will not be considered.

- OC1 :: Solid performer, available now, expensive for if using eMMC.  Remains a candidate.

- OPP :: a clear winner on the numbers but somewhat risky due to uncertainties related to lack community, long lead time and source.  On-board eMMC and WiFi good if they work.  Price, feature set and integration makes it a preferred candidate.

- RPi2 :: doesn't really win on any metric except community and being better/cheaper than BBB.  Not considered.

Final candidates are then *OC1* and *OPP*.


* Software Environment

Note: what follows in this section is all conceptual for right now.

An LPC runs the following software:

 - an X11 Desktop Environment (DE) 
 - a number of WAMP clients (see below)
 - various connectivity programs (eg, VNC)

** Interaction with the LPC

Interaction with the LPCs is organized into two layers.

*** Low level

Low-level interaction with the LPC is through WAMP (see [[https://raw.githubusercontent.com/tavendo/WAMP/master/spec/figure/sessions2.png][this figure]] for quick definition of terms).  Here are some examples of how the four WAMP client roles are used:

 - Caller :: a human /presenter/ executes an RPC on an LPC via a provided web page in order to start a VNC server and initiate a connection from a VNC viewer running on the presenter's laptop.

 - Callee :: the LPC starts a VNC server attached to the DE.

 - Publisher :: the LPC announces it has changed from state =IDLE= to state =VNC_SERVER=.  After the VNC server exits it announces it is back to state =IDLE= (more on states below).

 - Subscriber :: all open LPC monitoring web pages update to show the state change of this LPC.

*** End-user

Humans interact through interfaces to the low-level protocol using a variety of command line utilities, web interfaces and GUI applications.  

** Authentication and Authorization

There are multiple forms of authentication and authorization:

- Connection ::  the WAMP layer provides authentication realms which are used to implement low-level access policies.
-  Location ::  a "room token" may be required for some LPC calls in order to determine that the Caller is physically present in the room in which the called LPC resides.  This token is a randomly generated message which the LPC can display on the DE and which is periodically renewed.  Were required this token must be passed as an argument to the call.
- User ::  some applications which the LPC starts on the behest of a Caller require their own user authentication and/or authorization.  Examples include a VNC password or an SSH key.  Where required they must be passed as an argument to the call.

** Commands and states

An LPC is considered to be in a particular, well defined state and to transition between states based on calls to its available commands.  State changes are subject to constraints and when successful are published.

*** Commands

LPC commands are WAMP calls in the URI namespace:

#+BEGIN_EXAMPLE
<domain>.<location>.<call>
#+END_EXAMPLE

- =<domain>= :: a name for the organizational unit providing a set of LPCs managed together (typically the reverse-DNS domain name).  Example: =gov.bnl.phy=.
- =<location>= :: an identifier of the physical location of a single LPC.  Example: =room3_192= (follow [[https://github.com/tavendo/WAMP/blob/master/spec/basic.md#identifiers][strict WAMP URI patterns]])
- =<call>= :: the method to call

Some example =<call>=s (note, actual spelling may change):

- =show_token= :: display the current room token on the LPC DE
- =renew_token= :: force a renewal of the current room token
- =vnc_server= :: start a VNC server on the DE primed to accept the provided user password.
- =vnc_viewer= :: start a VNC viewer pointed at a given VNC server and using the proided user password.
- =ssh_connection= :: allow a one time SSH connection with the provided SSH public key 
- =x11_connection= :: allow a single, direct X11 connection
- =state= :: return the current state

These last two may then be used by a presenter to start =x2x=, =synergy= or other remote mouse+keyboard control mechanisms.

*** States

The LPC states are meant to provide a simple, abstract indication of what the LPC is doing at any given time.  Allowed transitions between states are governed by a directed, cyclic graph.  Not all transitions are make sense or are indeed allowed. 

[[./doc/commands.png]]


* Other stuff

Need to

- index showing available commands (use [[https://github.com/tavendo/WAMP/blob/master/spec/advanced.md#reflection][WAMP reflection]] and [[http://crossbar.io/docs/Using-Schemas/][schemas]])
- assert FSM constraints when running a command (and thus changing state) (state manged by LPC or by WAMP?)
- run commands asynchronously and such that when they complete they update state.
- return response to web giving any follow-on instructions/help/hints for the presenter to follow


** Things to think about

States:

- Locking out changes and overrides
- Recovery from error
- Monitoring

Projector:

- Monitoring and controlling the projector video source
- incorporating this into the state machine
- switch to HDMI2 based on presenter connection
- switch to HDMI1 if signal detected (possible?)

Audio:

What do?  The LPC may have a mic and could plug into the projector (does it have speakers?).

Link to calendaring?  Initiate vidyo or bluejeans calls?  run seevogh?

* Notes

** WAMP, Crossbar, Autobahn

- [[http://crossbar.io/docs/Installation-on-Linux/][Install crossbar]]
- [[http://crossbar.io/docs/Getting-started-with-Python/][Python Crossbar]]
- [[http://autobahn.ws/python/wamp/programming.html][Python Autobahn]]

#+BEGIN_EXAMPLE
$ cd tests/
$ crossbar init --template hello:python --appdir hello
#+END_EXAMPLE
